plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//swagger 기능 추가
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// spring-data-jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

	// mysql 의존성 추가
	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

		html.destination file("jacoco/jacocoHtml")
		xml.destination file("jacoco/jacoco.xml")
	}

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [] + Qdomains)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
		Qdomains.add(qPattern + "*")
	}
	violationRules {
		rule {
			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
			limit {
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.00
			}
		}

		rule {
			// 룰을 간단히 켜고 끌 수 있다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			// 라인 커버리지를 최소한 80% 만족시켜야 한다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
//			limit {
//				counter = 'LINE'
//				value = 'TOTALCOUNT'
//				maximum = 200
//			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [
//                    '*.test.*',
			] + Qdomains
		}
	}
}
